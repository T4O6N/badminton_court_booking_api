// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum courtNum {
  A1
  B1
  C1
  D1
  E1
  F1
  G1
  H1
  I1
  J1
}

enum PaymentStatus {
  booked
  paided
}

model Court {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  court_number   String
  court_price    Int
  duration_time  String[]
  available      Boolean  @default(true)
  courtBookingId String?  @db.ObjectId
  created_at     DateTime @default(now())
  updated_at     DateTime @default(now())

  courtBooking CourtBooking? @relation(fields: [courtBookingId], references: [id])
  // CourtBookingPayment CourtBookingPayment[]

  @@map("courts")
}

model CourtTime {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  start_time String
  end_time   String
  available  Boolean  @default(true)
  courtId    String   @db.ObjectId
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@map("courtTimes")
}

model CourtBooking {
  id             String               @id @default(auto()) @map("_id") @db.ObjectId
  device_id      String
  phone          String
  full_name      String
  payment_status PaymentStatus        @default(booked)
  expiredTime    DateTime?            @map("expired_time")
  booked_by      String
  total_amount   Int
  bookingDate    DateTime             @default(now())
  created_at     DateTime             @default(now())
  updated_at     DateTime             @default(now())
  court          Court[]
  bookingHistory CourtBookingHistory?
  bookingPayment CourtBookingPayment?

  @@map("courtBookings")
}

model CourtBookingHistory {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  device_id      String
  courtBookingId String?  @unique @db.ObjectId
  created_at     DateTime @default(now())
  updated_at     DateTime @default(now())

  courtBooking CourtBooking? @relation(fields: [courtBookingId], references: [id])

  @@map("courtBookingHistory")
}

model CourtBookingPayment {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  // court_id       String        @db.ObjectId
  courtBookingId String        @unique @db.ObjectId
  total_amount   Int
  payment_status PaymentStatus
  payment_date   DateTime      @default(now())
  created_at     DateTime      @default(now())
  updated_at     DateTime      @default(now())

  // court        Court        @relation(fields: [court_id], references: [id])
  courtBooking    CourtBooking                @relation(fields: [courtBookingId], references: [id])
  payment_history CourtBookingPaymentHistory?

  @@map("courtBookingPayments")
}

model CourtBookingPaymentHistory {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  booking_payment_id String?  @unique @db.ObjectId
  created_at         DateTime @default(now())
  updated_at         DateTime @default(now())

  booking_payment CourtBookingPayment? @relation(fields: [booking_payment_id], references: [id])

  @@map("courtBookingPaymentHistory")
}
