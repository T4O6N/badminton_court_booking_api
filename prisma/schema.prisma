// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum courtNum {
  A1
  B1
  C1
  D1
  E1
  F1
  G1
  H1
  I1
  J1
}

enum PaymentStatus {
  booked
  paided
}

enum CourtTimeStatus {
  available
  booked
  expired
}

//NOTE - Court model
model Court {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  court_booking_id         String?  @db.ObjectId
  court_booking_history_id String?  @db.ObjectId
  date                     String
  duration_time            String[]
  available                Boolean  @default(true)

  court_booking         CourtBooking?        @relation(fields: [court_booking_id], references: [id])
  court_booking_history CourtBookingHistory? @relation(fields: [court_booking_history_id], references: [id])

  @@map("courts")
}

//NOTE - Court Time model
model CourtTime {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  duration_time String[]
  status        CourtTimeStatus @default(available)

  @@map("courtTimes")
}

//NOTE - Court Booking model 
model CourtBooking {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  device_id      String
  phone          String
  full_name      String
  court_number   String
  payment_status PaymentStatus @default(booked)
  total_amount   Int
  booked_by      String
  created_at     DateTime      @default(now())
  updated_at     DateTime      @default(now())

  court           Court[]
  court_available CourtAvailable[]
  dash_board      Dashboard[]

  booking_history CourtBookingHistory?
  booking_payment CourtBookingPayment?

  @@map("courtBookings")
}

// Court booking history model
model CourtBookingHistory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  device_id        String
  court_booking_id String  @unique @db.ObjectId
  court            Court[]

  court_booking CourtBooking? @relation(fields: [court_booking_id], references: [id])

  @@map("courtBookingHistory")
}

//NOTE - Court booking payment model
model CourtBookingPayment {
  id                 String        @id @default(auto()) @map("_id") @db.ObjectId
  court_booking_id   String        @unique @db.ObjectId
  court_available_id String?       @db.ObjectId
  device_id          String
  date               String
  payment_time       String
  payment_status     PaymentStatus @default(paided)

  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  court_booking   CourtBooking    @relation(fields: [court_booking_id], references: [id])
  court_available CourtAvailable? @relation(fields: [court_available_id], references: [id])

  payment_history CourtBookingPaymentHistory?

  @@map("courtBookingPayments")
}

//NOTE - Court booking payment history model
model CourtBookingPaymentHistory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  device_id          String
  booking_payment_id String @unique @db.ObjectId
  court_available_id String @unique @db.ObjectId

  booking_payment CourtBookingPayment? @relation(fields: [booking_payment_id], references: [id])
  court_available CourtAvailable?      @relation(fields: [court_available_id], references: [id])

  @@map("courtBookingPaymentHistories")
}

//NOTE - Promotion model
model Promotion {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  title    String
  discount Int

  @@map("promotions")
}

model CourtAvailable {
  id                     String   @id @default(auto()) @map("_id") @db.ObjectId
  court_booking_id       String?  @db.ObjectId
  created_at             DateTime @default(now())
  updated_at             DateTime @default(now())
  totalAllCourtAvailable Int
  isExpiredAll           Boolean  @default(false)
  all_total_amount       Int
  date                   String
  duration_time          String[]

  court_booking              CourtBooking?               @relation(fields: [court_booking_id], references: [id])
  CourtBookingPaymentHistory CourtBookingPaymentHistory?
  CourtBookingPayment        CourtBookingPayment[]

  @@map("courtAvailables")
}

model Dashboard {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  court_booking_id String?  @db.ObjectId
  created_at       DateTime @default(now())
  updated_at       DateTime @default(now())

  court_booking CourtBooking? @relation(fields: [court_booking_id], references: [id])
}
